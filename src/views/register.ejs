<%- include('partials/header') %>

  <section class="registrationPage">
    <div class="container box">
      <form action="/register" class="form" id="form" method="POST">
        <h2>Join Warrior Gains!</h2>

        <div class="form-control">
          <label for="">First Name</label>
          <input type="text" name="fname" placeholder="First Name" id="fname" />
          <small>Error message</small>
        </div>

        <div class="form-control">
          <label for="">Last Name</label>
          <input type="text" name="lname" placeholder="Last Name" id="lname" />
          <small>Error message</small>
        </div>

        <div class="form-control">
          <label for="">Email</label>
          <input type="email" name="username" placeholder="Enter Email" id="email" />
          <small>Error message</small>
        </div>

        <div class="form-control">
          <label for="">Password</label>
          <input type="password" id="password" name="password" placeholder="Enter Password" />
          <small>Error message</small>
        </div>

        <div class="form-control">
          <label for="">Confirm Password</label>
          <input type="password" placeholder="Re-enter Password" id="password2" />
          <small>Error message</small>
        </div>

        <div class="form-control">
          <label for="">Date of Birth</label>
          <input type="date" name="dob" placeholder="Enter Date of Birth" id="dob" />
          <small>Error message</small>
        </div>

        <!-- Eye Icon -->
        <span class="show-pass">
          <i class="fas fa-eye" id="eye"></i>
        </span>

        <!-- Progress Bar -->
        <div class="progress">
          <div class="progress-bar" id="password-strength"></div>
        </div>

        <!-- List -->
        <ul class="form-list">
          <li>
            <span class="low-upper-case">
              <i class="fas fa-circle"></i>
              &nbsp; Lowercase & Uppercase
            </span>
          </li>
          <li>
            <span class="number">
              <i class="fas fa-circle"></i>
              &nbsp; Number (0-9)
            </span>
          </li>
          <li>
            <span class="special-char">
              <i class="fas fa-circle"></i>
              &nbsp; Special Character (!@#$%^&*)
            </span>
          </li>
          <li>
            <span class="eight-char">
              <i class="fas fa-circle"></i>
              &nbsp; At least 8 Character
            </span>
          </li>
        </ul>


        <button>Submit</button>
      </form>
    </div>
  </section>

  <!--<meta name="viewport" content="width=device-width" />-->

  <!--<script src="script.js"></script>-->
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap");


    /*This contains styling for text font for the form*/
    body {
      font-family: "Open Sans", sans-serif;
    }


    /*This contains styling for general colors to be used*/
    :root {
      --white: white;
      --black: #1c2b2d;
      --blue: #31326f;
      --light-blue: #005490;
      --color-primary: #9d0191;
      --color-sec: forestgreen;
      --grey: gainsboro;
      --dark-grey: #222831;
    }


    /*This is unversal selector styling to put everything in a box*/
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }


    /*This defines font size*/
    html {
      font-size: 10px;
    }


    /*This contains paragraph spacing*/
    p {
      font-size: 1.6rem;
      line-height: 1.5;
    }

    /*This contains styling for images*/
    img {
      width: 100%;
    }

    /*This contains styles for container*/
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 0 20px;
    }

    /*This contains tyles for registration page*/
    .registrationPage {
      height: 100vh;
      background-color: var(--grey);
      display: flex;
      justify-content: center;
      align-items: center;
    }


    /*This contains styles for box class*/
    .box {
      background-color: var(--white);
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
      width: 40rem;
    }

    /*This contains styles for form*/
    form {
      padding: 2rem;
    }


    /*This contains styles for form h2*/
    form h2 {
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 2rem;
    }


    /*This contains styles for form-control class*/
    .form-control {
      margin-bottom: 0.5rem;
      padding-bottom: .5rem;
      position: relative;
    }


    /*This contains styles for form-control label*/
    .form-control label {
      display: block;
      margin-bottom: 5px;
      color: #777;
    }


    /*This contains styles for form-control input box*/
    .form-control input {
      /*display: block;*/
      border: 2px solid var(--grey);
      border-radius: 3px;
      width: 100%;
      padding: 1rem;
      font-size: 1.4rem;

      display: inline-block;
      position: relative;
    }


    /*This contains styles for for-control focusing*/
    .form-control input:focus {
      border-color: rgba(0, 0, 0, 0.2);
    }

    .form-control.success input {
      border-color: green;
    }

    .form-control.error input {
      border-color: red;
    }


    /*This contains further styles for form-control text*/
    .form-control small {
      color: red;
      position: absolute;
      bottom: 0;
      left: 0;
      visibility: hidden;
    }

    /*This contains styles for form-control small icons and text*/
    .form-control.error small {
      visibility: visible;
      display: block;
      position: relative;
      flex-direction: column;
      padding-top: 0.5rem;
    }


    /*This contains styles for form button*/
    form button {
      width: 100%;
      background-color: var(--color-sec);
      border: none;
      outline: none;
      color: var(--white);
      padding: 1rem;
      font-size: 1.6rem;
      margin-top: 1rem;
      border-radius: 3px;
      cursor: pointer;
    }

    /*This contains style for eye icon*/
    .show-pass {
      position: absolute;
      top: 48%;
      right: 40%;
      display: inline-block;
    }

    /*This contains styles for eye icon*/
    .fa-eye {
      color: var(--blue);
      cursor: pointer;
    }


    /*This contains styles for password progress bar*/
    .progress {
      width: 100%;
      height: 3px;
      margin: 2rem 0;
      background-color: var(--grey);
    }


    /*This contains further styles for password progress bar*/
    .progress-bar {
      width: 5%;
      height: 3px;
      background-color: #777;
      transition: all 0.3s ease;
    }


    /*This contains styles for form-list*/
    .form-list {
      list-style-type: none;
    }

    .pb-danger {
      background-color: red;
    }

    .pb-warning {
      background-color: yellow;
    }

    .pb-primary {
      background-color: var(--light-blue);
    }

    .pb-success {
      background-color: green;
    }


    /*This contains styles for form circle*/
    .fa-circle {
      font-size: 6px;
    }

    .fa-check {
      color: #02b502;
    }

    /*This contains styles to make the eye responsive*/
    @media screen and (max-width: 777px) {
      .show-pass {
        position: relative;
        top: -182px;
        right: -92%;
        
      }
    }

    @media screen and (max-width: 1000px) {
      .show-pass {
        position: relative;
        top: -182px;
        right: -92%;
        
      }
    }

  </style>

  <script>
    // BEGIN PROGRESS BAR, PASSWORD PEAK, PASSWORD STRENGTH FUNCTIONALITIES - OWNER: ALTAIMEE H.
    let state,
      password = document.getElementById("password"),
      passwordStrength = document.getElementById("password-strength"),
      lowUpperCase = document.querySelector(".low-upper-case i"),
      number = document.querySelector(".number i"),
      specialChar = document.querySelector(".special-char i"),
      eightChar = document.querySelector(".eight-char i"),
      showPassword = document.querySelector(".show-pass"),
      eyeIcon = document.querySelector("#eye");

    showPassword.addEventListener("click", toggle);
    eyeIcon.addEventListener("click", toggleEye);
    password.addEventListener("keyup", () => {
      let pass = password.value;
      checkStrength(pass);
    });

    // Toggle password visibility
    function toggle() {
      if (state) {
        password.setAttribute("type", "password");
        state = false;
      } else {
        password.setAttribute("type", "text");
        state = true;
      }
    }

    // Toggle icon in password field
    function toggleEye() {
      eyeIcon.classList.toggle("fa-eye-slash");
    }

    // Check Password Strength
    function checkStrength(password) {
      let strength = 0;

      // check Lower and Uppercase
      if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {
        strength += 1;
        addCheck(lowUpperCase);
      } else {
        removeCheck(lowUpperCase);
      }
      // Check For Numbers
      if (password.match(/([0-9])/)) {
        strength += 1;
        addCheck(number);
      } else {
        removeCheck(number);
      }
      // Check For Special char
      if (password.match(/([!,%,&,@,#,$,^,*,?,_,~])/)) {
        strength += 1;
        addCheck(specialChar);
      } else {
        removeCheck(specialChar);
      }
      // Check if password is > 7
      if (password.length > 7) {
        strength += 1;
        addCheck(eightChar);
      } else {
        removeCheck(eightChar);
      }

      // Update progress bar
      if (strength == 1) {
        removePassStrength();
        passwordStrength.classList.add("pb-danger");
        passwordStrength.style = "width: 25%";
      } else if (strength == 2) {
        removePassStrength();
        passwordStrength.classList.add("pb-warning");
        passwordStrength.style = "width: 50%";
      } else if (strength == 3) {
        removePassStrength();
        passwordStrength.classList.add("pb-primary");
        passwordStrength.style = "width: 75%";
      } else if (strength == 4) {
        removePassStrength();
        passwordStrength.classList.add("pb-success");
        passwordStrength.style = "width: 100%";
      }
    }

    // Remove password strength classes
    function removePassStrength() {
      passwordStrength.classList.remove(
        "pb-danger",
        "pb-warning",
        "pb-primary",
        "pb-success"
      );
    }

    // Add Check Icon
    function addCheck(charRequired) {
      charRequired.classList.remove("fa-circle");
      charRequired.classList.add("fa-check");
    }
    // Remove Check Icon
    function removeCheck(charRequired) {
      charRequired.classList.remove("fa-check");
      charRequired.classList.add("fa-circle");
    }
    // END PROGRESS BAR, PASSWORD PEAK, PASSWORD STRENGTH FUNCTIONALITIES.


    // BEGIN VALID USER INPUTS ON FORM OR DISPLAY ERROR MESSAGE -
    // PASSWORD CONFIRMATION CHECK, D.O.B 18+, VALID EMAIL FUNTIONALITIES - OWNER: OMAR F.

    // Declare constants
    const form = document.getElementById('form');
    const fname = document.getElementById('fname');
    const lname = document.getElementById('lname');
    const email = document.getElementById('email');
    const pass = document.getElementById('password');
    const password2 = document.getElementById('password2');
    const dob = document.getElementById('dob');

    // Ensure user is 18+ to register
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth() + 1; //January is 0!
    var yyyy = today.getFullYear() - 18;
    if (dd < 10) {
      dd = '0' + dd
    }
    if (mm < 10) {
      mm = '0' + mm
    }

    today = yyyy + '-' + mm + '-' + dd;
    // document.getElementById("dob").setAttribute("max", today); 
    // Could set max date available to 18 years ago from today


    // Event listener to make sure user inputs in form are valid
    form.addEventListener('submit', e => {
      verifyInputs(e);
    })

    // Verify that user input meets reqs
    function verifyInputs(e) {
      // user entered values for inputs of form
      const emailValue = email.value.trim();
      const passwordValue = pass.value.trim();
      const password2Value = password2.value.trim();
      const fnameValue = fname.value.trim();
      const lnameValue = lname.value.trim();
      const dobValue = dob.value;

      // Ensure all inputs are not left blank or invalid, if so display error message
      if (fnameValue === '') {
        setFormError(fname, "What's your first name?")
        e.preventDefault();
      } else {
        setFormSuccess(fname);
      }

      if (lnameValue === '') {
        setFormError(lname, "What's your last name?")
        e.preventDefault();
      } else {
        setFormSuccess(lname);
      }

      // A valid email is entered beyond basic html verification
      if (emailValue === '') {
        setFormError(email, 'Email cannot be blank.');
        e.preventDefault();
      } else if (!isEmail(emailValue)) {
        setFormError(email, 'Please be sure to use your real email.');
        e.preventDefault();
      } else if (!isWsuEmail(emailValue)) {
        setFormError(email, 'Please be sure to use your Wayne State email.');
        e.preventDefault();
      } else {
        setFormSuccess(email);
      }

      if (passwordValue === '') {
        setFormError(pass, "Please enter a password.")
        e.preventDefault();
      } else {
        setFormSuccess(pass);
      }

      // Password confirmation verification
      if (password2Value === '') {
        setFormError(password2, "Please enter a password.")
        e.preventDefault();
      } else if (passwordValue !== password2Value) {
        setFormError(password2, "Passwords do not match.")
        e.preventDefault();
      } else {
        setFormSuccess(password2);
      }

      // User's date of birth must be 18 years or higher
      if (dobValue > today) {
        setFormError(dob, "All users must be 18 years or older in order to register.")
        e.preventDefault();
      } else if (dobValue == null || dobValue == '') {
        setFormError(dob, "Whats's your date of birth?")
        e.preventDefault();
      } else {
        setFormSuccess(dob);
      }
    }

    // form-control failure, a class modification if input parameters are invalid
    function setFormError(input, message) {
      const formControl = input.parentElement;
      const small = formControl.querySelector('small');

      small.innerText = message;
      formControl.className = 'form-control error'
    };

    // form-control success, a class modification if input parameters are valid
    function setFormSuccess(input) {
      const formControl = input.parentElement;
      formControl.className = 'form-control success'
    };

    // verify email entered is valid
    function isEmail(email) {
      return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
    }

    // verify user is using a wayne state email
    function isWsuEmail(email) {
      return email.includes("@wayne.edu")
    }

   // END VALID USER INPUTS ON FORM OR DISPLAY ERROR MESSAGE FUNTIONALITY.

  </script>

  <%- include('partials/header') %>